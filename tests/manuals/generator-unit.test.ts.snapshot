exports[`Manual Generator Unit Tests > should generate proper table format for multi-environment operations 1`] = `
"# Manual for: Deploy Web Server (v1.1.0)\\n\\n_Deploys the main web server application to staging and production environments._\\n\\n## Environments Overview\\n\\n| Environment | Description | Variables | Targets | Approval Required |\\n| ----------- | ----------- | --------- | ------- | ----------------- |\\n| staging | Staging environment for testing | REPLICAS: 2<br>DB_HOST: \\"staging-db.example.com\\"<br>PORT: 8080 | cluster-staging-us-east-1<br>cluster-staging-eu-west-1 | No |\\n| production | Live production environment | REPLICAS: 5<br>DB_HOST: \\"prod-db.example.com\\"<br>PORT: 80 | cluster-prod-us-east-1<br>cluster-prod-eu-west-1<br>cluster-prod-asia-south-1 | Yes |\\n\\n## 🛫 Pre-Flight Phase\\n\\n| Step | staging | production |\\n|------|---------|---------|\\n| [ ] Step 1: Build Docker Image 🛫⚙️<br>Build the application's Docker image | \`docker build -t web-server:latest .\` | \`docker build -t web-server:latest .\` |\\n\\n## ✈️ Flight Phase (Main Operations)\\n\\n| Step | staging | production |\\n|------|---------|---------|\\n| [ ] Step 2: Push Docker Image ✈️⚙️<br>Push the image to the container registry | \`docker push my-registry/web-server:latest\` | \`docker push my-registry/web-server:latest\` |\\n| [ ] Step 3: Deploy to Kubernetes ✈️⚙️<br>Deploy the application to Kubernetes | \`kubectl apply -f k8s/deployment.yaml\` | \`kubectl apply -f k8s/deployment.yaml\` |\\n| [ ] Step 4: Scale Deployment ✈️⚙️<br>Scale the Kubernetes deployment to the specified replica count | \`kubectl scale deployment web-server --replicas=2\` | \`kubectl scale deployment web-server --replicas=5\` |\\n\\n## 🛬 Post-Flight Phase\\n\\n| Step | staging | production |\\n|------|---------|---------|\\n| [ ] Step 5: Health Check 🛬👤<br>Manually verify deployment health<br>🎫 <em>Tickets: JIRA-123</em><br>👤 <em>PIC: john.doe</em><br>⏱️ <em>Timeline: 2024-01-15 10:00</em> | Check the application health endpoint at http://localhost:8080/health<br><br>**Sign-off:**<br>- [ ] PIC | Check the application health endpoint at http://localhost:80/health<br><br>**Sign-off:**<br>- [ ] PIC |\\n| [ ] Step 6: Verify Services 🛬👤<br>Verify all services are running correctly | \`curl https://web-server.example.com/health\` | \`curl https://web-server.example.com/health\` |\\n\\n## 🔄 Rollback Procedures\\n\\nIf deployment fails, execute the following rollback steps:\\n\\n### Rollback for: Deploy to Kubernetes\\n\\n| Environment | Rollback Action |\\n|-------------|----------------|\\n| staging | \`kubectl rollout undo deployment/web-server\` |\\n| production | \`kubectl rollout undo deployment/web-server\` |\\n\\n"
`;

exports[`Manual Generator Unit Tests > should render evidence results (file references and inline content) 1`] = `
"# Manual for: Evidence with Results Test (v1.0.0)\\n\\n_Test evidence with pre-captured results_\\n\\n## Environments Overview\\n\\n| Environment | Description | Variables | Targets | Approval Required |\\n| ----------- | ----------- | --------- | ------- | ----------------- |\\n| staging | Staging environment | NAMESPACE: \\"staging\\" |  | No |\\n| production | Production environment | NAMESPACE: \\"production\\" |  | No |\\n\\n## ✈️ Flight Phase (Main Operations)\\n\\n| Step | staging | production |\\n|------|---------|---------|\\n| [ ] Step 1: Deploy Application ✈️⚙️<br>📎 <em>Evidence Required: screenshot, command_output</em><br>\`\`\`bash<br># Paste command output here<br>\`\`\` | \`kubectl apply -f deployment.yaml -n staging\`<br><br>**Captured Evidence:**<br><br>**screenshot**: Kubernetes dashboard showing 3 pods running<br>![Evidence](./evidence/deployment-dashboard.png)<br><br>**command_output**:<br>\`\`\`bash<br>deployment.apps/web-server created<br>service/web-server created<br>NAME         READY   STATUS    RESTARTS   AGE<br>pod/web-0    1/1     Running   0          10s<br>pod/web-1    1/1     Running   0          10s<br>pod/web-2    1/1     Running   0          10s<br><br>\`\`\` | \`kubectl apply -f deployment.yaml -n production\`<br><br>**Captured Evidence:**<br><br>**screenshot**: Kubernetes dashboard showing all pods healthy<br>![Evidence](./evidence/production-dashboard.png)<br><br>**command_output**:<br>\`\`\`bash<br>deployment.apps/web-server created<br>service/web-server created<br>NAME         READY   STATUS    RESTARTS   AGE<br>pod/web-0    1/1     Running   0          15s<br>pod/web-1    1/1     Running   0          15s<br>pod/web-2    1/1     Running   0          15s<br><br>\`\`\` |\\n\\n## 🛬 Post-Flight Phase\\n\\n| Step | staging | production |\\n|------|---------|---------|\\n| [ ] Step 2: Manual Verification 🛬👤<br>📎 <em>Evidence Required: screenshot</em> | Verify deployment is successful:<br>1. Check application homepage<br>2. Test login functionality<br><br>**Captured Evidence:**<br><br>**screenshot**: Homepage showing \\"Welcome\\" message<br>![Evidence](./evidence/homepage-screenshot.png) | Verify deployment is successful:<br>1. Check application homepage<br>2. Test login functionality<br><br>**Captured Evidence:**<br><br>**screenshot**: Production homepage verified<br>![Evidence](./evidence/prod-homepage-screenshot.png) |\\n| [ ] Step 3: Log Collection 🛬👤<br>📎 <em>Evidence Optional: log</em> | Check application logs<br><br>**Captured Evidence:**<br><br>**log**: Application startup logs<br>\`\`\`text<br>[2025-10-16 10:30:00] INFO: Application started<br>[2025-10-16 10:30:05] INFO: Database connection established<br>[2025-10-16 10:30:10] INFO: Ready to accept connections<br><br>\`\`\` | Check application logs<br><br>**Captured Evidence:**<br><br>**log**: Production startup logs<br>\`\`\`text<br>[2025-10-16 14:00:00] INFO: Application started<br>[2025-10-16 14:00:02] INFO: Database connection established<br>[2025-10-16 14:00:03] INFO: Ready to accept connections<br><br>\`\`\` |\\n| [ ] Step 4: No Evidence Results 🛬⚙️<br>📎 <em>Evidence Required: command_output</em><br>\`\`\`bash<br># Paste command output here<br>\`\`\` | \`echo \\"Done\\"\` | \`echo \\"Done\\"\` |\\n\\n"
`;

exports[`Manual Generator Unit Tests > should render overview section with flexible metadata fields 1`] = `
"# Manual for: Deployment with Overview (v1.0.0)\\n\\n_Sample deployment operation with overview metadata_\\n\\n## Overview\\n\\n| Item | Specification |\\n| ---- | ------------- |\\n| Release Date | 23 Jul 2025 |\\n| Release Notes | https://confluence.example.com/release-notes/v1.0.0 |\\n| Release Ticket | INPDRP-2489 |\\n| EPIC Tickets | https://github.com/project/issues/152 |\\n| Manual Status | APPROVED |\\n| War Room | https://zoom.us/j/warroom-rehearsal |\\n| Production Release War Room | https://zoom.us/j/warroom-prod |\\n\\n## Environments Overview\\n\\n| Environment | Description | Variables | Targets | Approval Required |\\n| ----------- | ----------- | --------- | ------- | ----------------- |\\n| production | Production environment | REPLICAS: 3<br>DB_HOST: \\"prod-db.example.com\\" |  | Yes |\\n\\n## ✈️ Flight Phase (Main Operations)\\n\\n| Step | production |\\n|------|---------|\\n| [ ] Step 1: Deploy Application ✈️👤 | Deploy the application to production |\\n\\n"
`;

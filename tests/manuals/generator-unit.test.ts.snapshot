exports[`Manual Generator Unit Tests > should generate proper table format for multi-environment operations 1`] = `
"# Manual for: Test Operation (v2.0.0)\\n\\n_Test operation for unit testing_\\n\\n## Environments Overview\\n\\n| Environment | Description | Variables | Targets | Approval Required |\\n| ----------- | ----------- | --------- | ------- | ----------------- |\\n| staging | Staging environment | REPLICAS: 2<br>PORT: 8080 | staging-cluster-1<br>staging-cluster-2 | No |\\n| production | Production environment | REPLICAS: 5<br>PORT: 80 | prod-cluster-1<br>prod-cluster-2<br>prod-cluster-3 | Yes |\\n\\n## 🛫 Pre-Flight Phase\\n\\n| Step | staging | production |\\n|------|---------|---------|\\n| ☐ Step 1: Check Docker 🛫⚙️<br><em>Phase: preflight</em><br>Verify Docker is running | \`docker version\` | \`docker version\` |\\n\\n## ✈️ Flight Phase (Main Operations)\\n\\n| Step | staging | production |\\n|------|---------|---------|\\n| ☐ Step 2: Build Application ⚙️<br>Build the Docker image | \`docker build -t app:latest .\` | \`docker build -t app:latest .\` |\\n| ☐ Step 3: Scale Service ⚙️<br>Scale to target replicas | \`kubectl scale deployment app --replicas=2\` | \`kubectl scale deployment app --replicas=5\` |\\n| ☐ Step 4: Manual Health Check 👤<br>Verify application health | \`curl http://localhost:8080/health\` | \`curl http://localhost:80/health\` |\\n\\n"
`;

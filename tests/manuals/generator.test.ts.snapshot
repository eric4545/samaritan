exports[`Manual Generation CLI Command > should generate a Markdown manual with environment-specific details and substituted variables 1`] = `
"# Manual for: Deploy Web Server (v1.1.0)\\n\\n_Deploys the main web server application to the staging environment._\\n\\n## Environments Overview\\n\\n| Environment | Description | Variables | Targets | Approval Required |\\n| ----------- | ----------- | --------- | ------- | ----------------- |\\n| preprod | preprod | REPLICAS: 2<br>DB_HOST: \\"preprod-db.example.com\\" | cluster-dev-us-east-1<br>cluster-dev-eu-west-1 | No |\\n| production | Live production environment. | REPLICAS: 5<br>DB_HOST: \\"prod-db.example.com\\" | cluster-prod-us-east-1<br>cluster-prod-eu-west-1<br>cluster-prod-asia-south-1 | Yes |\\n\\n## 🛫 Pre-Flight Phase\\n\\n| Step | preprod | production |\\n|------|---------|---------|\\n| Step 1: Check Git status 🛫⚙️<br><em>Phase: preflight</em><br>Ensure no uncommitted changes exist in the current branch. | \`git status --porcelain\` | \`git status --porcelain\` |\\n| Step 2: Check Docker daemon 🛫⚙️<br><em>Phase: preflight</em><br>Verify that the Docker daemon is running and accessible. | \`docker info\` | \`docker info\` |\\n\\n## ✈️ Flight Phase (Main Operations)\\n\\n| Step | preprod | production |\\n|------|---------|---------|\\n| Step 1: Build Docker Image ✈️⚙️<br><em>Phase: flight</em><br>Build the application's Docker image. | \`docker build -t web-server:latest .\` | \`docker build -t web-server:latest .\` |\\n| Step 2: Push Docker Image ✈️⚙️<br><em>Phase: flight</em><br>Push the image to the container registry. | \`docker push my-registry/web-server:latest\` | \`docker push my-registry/web-server:latest\` |\\n| Step 3: Request Approval ✈️✋<br><em>Phase: flight</em><br>Request manager approval for deployment. | \`jira create-ticket --type approval --summary \\"Deploy Web Server\\"\` | \`jira create-ticket --type approval --summary \\"Deploy Web Server\\"\` |\\n| Step 4: Scale Deployment ✈️⚙️<br><em>Phase: flight</em><br>Scale the Kubernetes deployment to the specified replica count. | \`kubectl scale deployment web-server --replicas=2\` | \`kubectl scale deployment web-server --replicas=5\` |\\n| Step 5: Manual Verification ✈️👤<br><em>Phase: flight</em><br>Manually verify deployment health. | \`curl https://web-server.example.com/health\` | \`curl https://web-server.example.com/health\` |\\n| Step 6: Deploy to Kubernetes ✈️⚙️<br><em>Phase: flight</em><br>Apply the Kubernetes deployment manifest. | \`kubectl apply -f k8s/deployment.yaml\` | \`kubectl apply -f k8s/deployment.yaml\` |\\n\\n"
`;

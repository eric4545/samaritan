name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  DEFAULT_NODE_VERSION: '24.x'

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20.x, 22.x, 24.x]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run tests
      run: npm test

    - name: Test CLI commands
      run: |
        npm start -- --help
        npm start -- validate examples/deployment.yaml
        npm start -- generate manual examples/deployment.yaml -o /tmp/test-manual.md

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: test-results-${{ matrix.node-version }}
        path: |
          coverage/
          test-results.xml

  lint:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.DEFAULT_NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run linting
      run: npx @biomejs/biome check .

  validate-examples:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.DEFAULT_NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Validate all examples
      run: |
        for file in examples/*.yaml; do
          echo "Validating $file"
          npm start -- validate "$file" --strict
        done

    - name: Test manual generation for all examples
      run: |
        for file in examples/*.yaml; do
          echo "Generating manual for $file"
          npm start -- generate manual "$file" -o "/tmp/$(basename "$file" .yaml)-manual.md"
        done

  security:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.DEFAULT_NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run security audit
      run: npm audit --audit-level=moderate

    - name: Check for vulnerabilities
      run: npx audit-ci --moderate

  build-test:
    name: Test Build Process
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.DEFAULT_NODE_VERSION }}

    - name: Install dependencies
      run: npm ci

    - name: Run build
      run: npm run build

    - name: Test built CLI works
      run: |
        echo "Testing CLI commands from dist/ folder"
        node dist/cli/index.js --help
        node dist/cli/index.js validate examples/deployment.yaml
        node dist/cli/index.js schema --help
        node dist/cli/index.js schema -o /tmp/schema.json
        echo "✅ All commands work after build"

    - name: Verify dist folder was created
      run: |
        if [ ! -d "dist" ]; then
          echo "❌ ERROR: dist/ folder not created during build"
          exit 1
        fi
        if [ ! -f "dist/cli/index.js" ]; then
          echo "❌ ERROR: dist/cli/index.js not found"
          exit 1
        fi
        if [ ! -f "dist/cli/commands/schema.js" ]; then
          echo "❌ ERROR: dist/cli/commands/schema.js not found"
          exit 1
        fi
        echo "✅ All required files present in dist/"